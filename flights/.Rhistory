geom_node_text(aes(label=city)) +
geom_edge_link(aes(color=airline)) +
theme_void()
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_link(aes(label=airline)) +
theme_void()
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_arc(aes(label=airline)) +
theme_void()
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_arc(aes(label=airline), arrow = T) +
theme_void()
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_arc(aes(label=airline), arrows = T) +
theme_void()
plot(g, edge.arrow.size=0.8, edge.curved=T)
plot(g, edge.arrow.size=0.8, edge.curved=T)
e <-  c(1,2, 2,3, 3,1, 3,4 , 4,1 , 2,1)
g <- graph(e, n=5, directed = TRUE)
curve.reciprocal.edges <- function(g, curve=.3){
# Return a graph where the edge-attribute $curved is reset to highlight reciprocal edges
el <- t(apply(get.edgelist(g),1,sort))
E(g)$curved <- 0
E(g)[duplicated(el) | duplicated(el,fromLast =TRUE)]$curved <- curve
(g)
}
plot(g, layout=layout.circle, edge.curved=.2)
plot(curve.reciprocal.edges(g), layout=layout.circle)
g = igraph::induced_subgraph(routes_g, v=possible_paths[[1]])
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_fan(aes(label=airline), arrows = T) +
theme_void()
help("geom_edge_fan")
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_fan(aes(label=airline), arrows = arrow()) +
theme_void()
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_fan(aes(label=airline), arrows = arrow(length = unit(2, "inches"))) +
theme_void()
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_fan(aes(label=airline), arrows = arrow(angle=5, length = unit(2, "inches"))) +
theme_void()
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_fan(aes(label=airline), arrow = arrow(angle=5, length = unit(2, "inches"))) +
theme_void()
ggraph(g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_fan(aes(label=airline), arrow = arrow(angle=5)) +
theme_void()
g
igraph::as.undirected(g)
ggraph(igraph::as.undirected(g)) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_fan(aes(label=airline)) +
theme_void()
g
possible_paths[[1]]
path(
possible_paths[[1]]
)
edge(possible_paths[[1]])
igraph::subgraph.edges(routes_g, edges=edge(possible_paths[[1]]))
all_shortest_paths(routes_g,from=depart, to=dest, mode="out")
class(possible_paths[[1]])
path(possible_paths[[1]])
class(path(possible_paths[[1]]))
E(routes_g, path=path(possible_paths[[1]]))
make_graph(possible_paths[[1]])
as_ids(possible_paths[[1]])
make_graph(as_ids(possible_paths[[1]]))
make_graph(as_ids(possible_paths[[1]]), directed=T)
possible_paths[[1]]
possible_paths[[1]]
make_empty_graph() + path(possible_paths[[1]])
path(possible_paths[[1]])
make_empty_graph()
make_empty_graph() + vertices(possible_paths[[1]])
make_empty_graph() + vertices(possible_paths[[1]]) + path(possible_paths[[1]])
make_empty_graph() + vertices(possible_paths[[1]])
sub_graph = make_empty_graph() + vertices(possible_paths[[1]])
V(sub_graph)
help("vertices")
sub_graph = make_empty_graph() + vertices(name=possible_paths[[1]])
V(sub_graph)
possible_paths[[1]]
path(possible_paths[[1]])
make_empty_graph()
help("make_empty_graph")
make_empty_graph(named=T)
possible_paths[[1]]
vertices(possible_paths[[1]])
shortest_paths(routes_g,from=depart, to=dest, mode="out")
shortest_paths(routes_g,from=depart, to=dest, mode="out")$vpath
possible_paths = shortest_paths(routes_g,from=depart, to=dest, mode="out")$vpath
unlist(shortest_paths(routes_g,from=depart, to=dest, mode="out")$vpath)
possible_path =  possible_paths[[1]]
unlist(possible_path)
possible_paths = shortest_paths(routes_g,from=depart, to=dest, mode="out")$vpath
possible_path =  possible_paths[[1]]
unlist(possible_path)
possible_paths = shortest_paths(routes_g,from=depart, to=dest, mode="out")$vpath
possible_paths
unlist(possible_paths)
vertices(possible_paths[[1]])
make_empty_graph(directed=T) + vertices(possible_paths[[1]]) + unlist(possible_paths)
unlist(possible_paths)
possible_path
make_empty_graph(directed=T) + vertices(possible_path)
sub_graph = make_empty_graph(directed=T) + vertices(possible_path)
V(sub_graph)
possible_path
names(possible_path)
sub_graph = make_empty_graph(directed=T) + vertices(names(possible_path))
V(sub_graph)
make_empty_graph(directed=T) + vertices(names(possible_path))
sub_graph = make_empty_graph(directed=T) + vertices(names(possible_path)) + path(possible_path)
sub_graph = make_empty_graph(directed=T) + vertices(names(possible_path))
V(sub_graph)
path(possible_path)
depart =  routes_airports %>%
filter(city=="Philadelphia", country=="United States") %>%
pull(airport)
dest =  routes_airports %>%
filter(city=="Beijing", country=="China") %>%
pull(airport)
possible_paths = shortest_paths(routes_g,from=depart, to=dest, mode="out")$vpath
possible_paths
all_shortest_paths(routes_g,from=depart, to=dest, mode="out")
possible_paths = shortest_paths(routes_g,from=depart, to=dest, mode="out")$res
possible_paths
possible_paths = all_shortest_paths(routes_g,from=depart, to=dest, mode="out")$res
possible_paths
dest
possible_paths
possible_path =  possible_paths[[1]]
possible_path
lapply(possible_paths, function(x){x %>% igraph::as_ids()})
possible_paths = unique(lapply(possible_paths, function(x){x %>% igraph::as_ids()}))
possible_paths
sapply(possible_paths, length)
min(sapply(possible_paths, length))
min_distance = min(sapply(possible_paths, length))
sapply(possible_paths, function(x){length==min_distance})
sapply(possible_paths, function(x){length(x)==min_distance})
possible_paths[sapply(possible_paths, function(x){length(x)==min_distance})]
shortest_paths = possible_paths[sapply(possible_paths, function(x){length(x)==min_distance})]
shortest_paths
shortest_paths[[1]]
short_path=shortest_paths[[1]]
n = length(short_path)
eids = character(n-1)
n = length(short_path)
eids = character(n-1)
for i in (1:n-1) {
eids[i]=paste(short_path[i],short_path[i+1],sep="|")
}
n = length(short_path)
eids = character(n-1)
for (i in 1:n-1) {
eids[i]=paste(short_path[i],short_path[i+1],sep="|")
}
eids
subgraph.edges(routes_g, eids, delete.vertices = TRUE)
sub_g = subgraph.edges(routes_g, eids, delete.vertices = TRUE)
igragh::as_data_frame(sub_g, what="edges")
help("as_data_frame")
sub_g
as_data_frame(sub_g, what="edges")
igraph::as_data_frame(sub_g, what="edges")
shortest_path_airlines = lapply(shortest_paths, extract_airlineInf)
extract_airlineInf <- function(short_path){
n = length(short_path)
# create edge ids
eids = character(n-1)
for (i in 1:n-1) {
eids[i]=paste(short_path[i],short_path[i+1],sep="|")
}
# subgraph using edge ids
sub_g = subgraph.edges(routes_g, eids, delete.vertices = TRUE)
# return data.frame for airline information
igraph::as_data_frame(sub_g, what="edges")
}
shortest_path_airlines = lapply(shortest_paths, extract_airlineInf)
shortest_path_airlines
names(shortest_path_airlines)
shortest_paths
sapply(shortest_paths, function(x){paste(x,collapse="->")})
names(shortest_path_airlines) = sapply(shortest_paths, function(x){paste(x,collapse="->")})
shortest_path_airlines
eids
help("do.calls")
help("do.call")
do.call("bind_rows",shortest_path_airlines)
routes
routes_airports %>%
dplyr::rename(name=airport, fullname=name) %>%
select(name, fullname, country, city, latitude, longitude, timezone)
phl2pek_edges = do.call("bind_rows",shortest_path_airlines)
phl2pek_edges
bind_rows(
phl2pek_edges %>% select(airport=from),
phl2pek_edges %>% select(airport=to)
)
bind_rows(
phl2pek_edges %>% select(airport=from),
phl2pek_edges %>% select(airport=to)
) %>% distinct()
left_join(
bind_rows(
phl2pek_edges %>% select(airport=from),
phl2pek_edges %>% select(airport=to)
) %>% distinct(),
routes_airports
)  %>%  dplyr::rename(name=airport, fullname=name) %>%
select(name, fullname, country, city, latitude, longitude, timezone)
help("graph_from_data_frame")
igraph::graph_from_data_frame(
phl2pek_edges,
directed = T,
phl2pek_vertices
)
phl2pek_edges = do.call("bind_rows",shortest_path_airlines) %>% tbl_df
phl2pek_vertices = left_join(
bind_rows(
phl2pek_edges %>% select(airport=from),
phl2pek_edges %>% select(airport=to)
) %>% distinct(),
routes_airports
)  %>%  dplyr::rename(name=airport, fullname=name) %>%
select(name, fullname, country, city, latitude, longitude, timezone)
igraph::graph_from_data_frame(
phl2pek_edges,
directed = T,
phl2pek_vertices
)
phl2pek_g = igraph::graph_from_data_frame(
phl2pek_edges,
directed = T,
phl2pek_vertices
)
phl2pek_g
ggraph(phl2pek_g) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_fan(aes(label=airline)) +
theme_void()
ggraph(phl2pek_g, "kk") +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=city)) +
geom_edge_fan(aes(label=airline)) +
theme_void()
ggraph(phl2pek_g, "kk") +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=name)) +
geom_edge_fan(aes(label=airline)) +
theme_void()
ggraph(phl2pek_g, "kk") +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=paste(name, city, sep="-"))) +
geom_edge_fan(aes(label=airline)) +
theme_void()
help("geom_edge_fan")
routes
routes %>% filter(source_airport=="PHL", dest_airport=="IAD")
routes %>% filter(source_airport=="PHL", dest_airport=="ORD")
possible_paths
subgraph.edges(routes_g, "PHL|ORD")
E(subgraph.edges(routes_g, "PHL|ORD"))
induced_subgraph(routes_g, c("PHL",
"ORD"))
ggraph(phl2pek_g, "kk") +
facet_nodes(~country) +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=paste(name, city, sep="-"))) +
geom_edge_fan(aes(label=airline)) +
theme_void()
help("facet_nodes")
ggraph(phl2pek_g, "kk") +
facet_nodes(~country) +
geom_node_point(alpha=0.5, size=6) +
geom_node_text(aes(label=paste(name, city, sep="-"))) +
geom_edge_fan(aes(label=airline)) +
theme_void()
ggraph(phl2pek_g, "kk") +
facet_nodes(~country) +
geom_node_point(alpha=0.5, size=6) +
geom_node_text(aes(label=paste(name, city, sep="-")))
ggraph(phl2pek_g, "kk") +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=paste(name, city, sep="-"))) +
geom_edge_fan(aes(label=airline)) +
theme_void()
igraph::is_simple(routes_g)
airlines
airline
route_airlines
subgraph.edges
short_path
induced_subgraph(routes_g, short_path)
as_data_frame(induced_subgraph(routes_g, short_path), what="edges")
subgraph.edges(routes_g, eids, delete.vertices = F)
subgraph.edges(routes_g, eids, delete.vertices = TRUE)
induced_subgraph(routes_g, short_path, impl="auto")
induced_subgraph(routes_g, short_path, impl="copy_and_delete")
induced_subgraph(routes_g, short_path, impl="create_from_scratch")
induced_subgraph(routes_g, short_path)
sub_g
induced_subgraph(routes_g, short_path)
sub_g2 = induced_subgraph(routes_g, short_path)
igraph::as_data_frame(sub_g2, what="edges")
short_path
order(short_path)
help("reorder")
short_path
path_orders=1:length(short_path)
names(path_orders) = short_path
path_orders
igraph::as_data_frame(sub_g2, what="edges") %>% tbl_df() %>%
filter(path_orders[from] < path_orders[to])
extract_airlineInf2 <- function(short_path){
path_orders=1:length(short_path)
names(path_orders) = short_path
# subgraph using vertex ids
sub_g2 = induced_subgraph(routes_g, short_path)
# return data.frame for airline information
igraph::as_data_frame(sub_g2, what="edges") %>% tbl_df() %>%
filter(path_orders[from] < path_orders[to])
}
lapply(shortest_paths, extract_airlineInf2)
shortest_path_airlines = lapply(shortest_paths, extract_airlineInf2)
names(shortest_path_airlines) = sapply(shortest_paths, function(x){paste(x,collapse="->")})
shortest_path_airlines
phl2pek_edges = do.call("bind_rows",shortest_path_airlines) %>% tbl_df
phl2pek_vertices = left_join(
bind_rows(
phl2pek_edges %>% select(airport=from),
phl2pek_edges %>% select(airport=to)
) %>% distinct(),
routes_airports
)  %>%  dplyr::rename(name=airport, fullname=name) %>%
select(name, fullname, country, city, latitude, longitude, timezone)
phl2pek_g = igraph::graph_from_data_frame(
phl2pek_edges,
directed = T,
phl2pek_vertices
)
ggraph(phl2pek_g, "kk") +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=paste(name, city, sep="-"))) +
geom_edge_fan(aes(label=airline)) +
theme_void()
shortest_path_airlines
shortest_path_airlines[[1]]
short_path = shortest_path_airlines[[1]]
names(short_path)
igraph::as_data_frame(sub_g2, what="edges") %>% tbl_df() %>%
filter(path_orders[from] < path_orders[to])
short_path
shortest_path_airlines
help("geom_edge_fan")
ggraph(phl2pek_g, "kk") +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=paste(name, city, sep="-"))) +
geom_edge_fan(aes(edge_colour=airline)) +
theme_void()
phl2pek_edges
shortest_path_airlines
short_path_df = shortest_path_airlines[[1]]
short_path_df %>% group_by(from,to) %>% summarise(n_distinct(airline))
short_path_df
short_path_df %>% group_by(from,to) %>% filter(airline==airline)
short_path_df %>% distinct(from,to)
airport2airport = short_path_df %>% distinct(from,to)
airport2airport[1,]
as.list(airport2airport)
airport2airport
nrow(airport2airport)
x=1
semi_join(short_path_df, airport2airport[x,])
semi_join(short_path_df, airport2airport[x,]) %>% select(airline)
help("expand.grid")
lapply(nrow(airport2airport), function(x){semi_join(short_path_df, airport2airport[x,]) %>% pull(airline)})
nrow(airport2airport)
lapply(1:nrow(airport2airport), function(x){semi_join(short_path_df, airport2airport[x,]) %>% pull(airline)})
path_airlines = lapply(1:nrow(airport2airport), function(x){semi_join(short_path_df, airport2airport[x,]) %>% pull(airline)})
path_airlines
do.call("expand.grid", path_airlines)
do.call("expand.grid", path_airlines) %>% filter(Var1==Var2)
do.call("expand.grid", path_airlines) %>% tbl_df() %>% filter(Var1==Var2)
do.call("expand.grid", path_airlines) %>% tbl_df()
do.call("expand.grid", path_airlines, stringsAsFactors==F) %>% tbl_df()
do.call("expand.grid", path_airlines, stringsAsFactors=F) %>% tbl_df()
help("do.call")
do.call("expand.grid",stringsAsFactors = F, path_airlines) %>% tbl_df()
do.call("expand.grid", list(path_airlines,  stringsAsFactors = F)) %>% tbl_df()
do.call("expand.grid", list(path_airlines,  stringsAsFactors = F)) %>% tbl_df() %>% filter(Var1==Var2)
do.call("expand.grid", list(path_airlines,  stringsAsFactors = F)) %>% tbl_df() %>%
filter(Var1==Var2)
do.call("expand.grid", list(path_airlines,  stringsAsFactors = F)) %>% tbl_df() %>%
filter(Var1==Var2) %>% pull(Var)
do.call("expand.grid", list(path_airlines,  stringsAsFactors = F)) %>% tbl_df() %>%
filter(Var1==Var2) %>% pull(Var1)
short_path_df
do.call("expand.grid", list(path_airlines,  stringsAsFactors = F)) %>% tbl_df()
do.call("expand.grid", list(path_airlines,  stringsAsFactors = F))
lapply(1:nrow(airport2airport), function(x){semi_join(short_path_df, airport2airport[x,]) %>% pull(airline)})
path_airlines = do.call("expand.grid", list(path_airlines,  stringsAsFactors = F))
path_airlines
sapply(1:nrow(path_airlines), function(x){length(path_airlines[x,])})
sapply(1:nrow(path_airlines), function(x){length(unique(path_airlines[x,]))})
unique(path_airlines
)
path_airlines
x=1
length(unique(path_airlines[x,]))
x=2
length(unique(path_airlines[x,]))
unique(path_airlines[x,])
path_airlines[x,]
class(path_airlines[x,])
unlist(path_airlines[x,])
class(unlist(path_airlines[x,]))
unique(unlist(path_airlines[x,]))
sapply(1:nrow(path_airlines), function(x){length(unique(unlist(path_airlines[x,])))})
sapply(1:nrow(path_airlines), function(x){length(unique(unlist(path_airlines[x,]))) == 1})
path_airlines
path_airlines[sapply(1:nrow(path_airlines), function(x){length(unique(unlist(path_airlines[x,]))) == 1}),]
path_airlines[sapply(1:nrow(path_airlines), function(x){length(unique(unlist(path_airlines[x,]))) == 1}),]$Var1
short_path_df
path_airlines = path_airlines[sapply(1:nrow(path_airlines), function(x){length(unique(unlist(path_airlines[x,]))) == 1}),]$Var1
short_path_df %>% filter(airline %in% path_airlines)
subset_same_airline <- function(short_path_df) {
airport2airport = short_path_df %>% distinct(from,to)
path_airlines = lapply(
1:nrow(airport2airport),
function(x){
semi_join(short_path_df, airport2airport[x,]) %>%
pull(airline)
}
)
path_airlines = do.call("expand.grid", list(path_airlines,  stringsAsFactors = F))
path_airlines = path_airlines[sapply(1:nrow(path_airlines), function(x){length(unique(unlist(path_airlines[x,]))) == 1}),]$Var1
short_path_df %>% filter(airline %in% path_airlines)
}
shortest_path_airlines
lapply(shortest_path_airlines, subset_same_airline)
shortest_path_same_airlines = lapply(shortest_path_airlines, subset_same_airline)
do.call("bind_rows",shortest_path_same_airlines) %>% tbl_df
phl2pek_edges = do.call("bind_rows",shortest_path_same_airlines) %>% tbl_df
phl2pek_vertices = left_join(
bind_rows(
phl2pek_edges %>% select(airport=from),
phl2pek_edges %>% select(airport=to)
) %>% distinct(),
routes_airports
)  %>%  dplyr::rename(name=airport, fullname=name) %>%
select(name, fullname, country, city, latitude, longitude, timezone)
phl2pek_edges
phl2pek_vertices
ggraph(phl2pek_g, "kk") +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=paste(name, city, sep="-"))) +
geom_edge_fan(aes(edge_colour=airline)) +
theme_void()
phl2pek_edges = do.call("bind_rows",shortest_path_same_airlines) %>% tbl_df
phl2pek_vertices = left_join(
bind_rows(
phl2pek_edges %>% select(airport=from),
phl2pek_edges %>% select(airport=to)
) %>% distinct(),
routes_airports
)  %>%  dplyr::rename(name=airport, fullname=name) %>%
select(name, fullname, country, city, latitude, longitude, timezone)
phl2pek_g = igraph::graph_from_data_frame(
phl2pek_edges,
directed = T,
phl2pek_vertices
)
ggraph(phl2pek_g, "kk") +
geom_node_point(aes(color=country), alpha=0.5, size=6) +
geom_node_text(aes(label=paste(name, city, sep="-"))) +
geom_edge_fan(aes(edge_colour=airline)) +
theme_void()
library(tidyverse)
library(igraph)
library(ggraph)
library(tidyverse)
library(igraph)
library(ggraph)
library(tidyverse)
library(igraph)
library(ggraph)
